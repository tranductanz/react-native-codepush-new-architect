/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of RNScriptManagerSpec symbols
#ifndef RNScriptManagerSpec_H
#define RNScriptManagerSpec_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>


NS_ASSUME_NONNULL_BEGIN
namespace JS {
  namespace NativeScriptManager {
    struct NormalizedScriptLocator {
      NSString *uniqueId() const;
      NSString *method() const;
      NSString *url() const;
      bool fetch() const;
      double timeout() const;
      bool absolute() const;
      NSString *query() const;
      id<NSObject> _Nullable headers() const;
      NSString *body() const;
      NSString *verifyScriptSignature() const;

      NormalizedScriptLocator(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeScriptManager_NormalizedScriptLocator)
+ (RCTManagedPointer *)JS_NativeScriptManager_NormalizedScriptLocator:(id)json;
@end
@protocol NativeScriptManagerSpec <RCTBridgeModule, RCTTurboModule>

- (void)loadScript:(NSString *)scriptId
      scriptConfig:(JS::NativeScriptManager::NormalizedScriptLocator &)scriptConfig
           resolve:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)prefetchScript:(NSString *)scriptId
          scriptConfig:(JS::NativeScriptManager::NormalizedScriptLocator &)scriptConfig
               resolve:(RCTPromiseResolveBlock)resolve
                reject:(RCTPromiseRejectBlock)reject;
- (void)invalidateScripts:(NSArray *)scripts
                  resolve:(RCTPromiseResolveBlock)resolve
                   reject:(RCTPromiseRejectBlock)reject;
- (NSNumber *)unstable_evaluateScript:(NSString *)scriptSource
                      scriptSourceUrl:(NSString *)scriptSourceUrl;

@end

@interface NativeScriptManagerSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeScriptManager'
   */
  class JSI_EXPORT NativeScriptManagerSpecJSI : public ObjCTurboModule {
  public:
    NativeScriptManagerSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
inline NSString *JS::NativeScriptManager::NormalizedScriptLocator::uniqueId() const
{
  id const p = _v[@"uniqueId"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeScriptManager::NormalizedScriptLocator::method() const
{
  id const p = _v[@"method"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeScriptManager::NormalizedScriptLocator::url() const
{
  id const p = _v[@"url"];
  return RCTBridgingToString(p);
}
inline bool JS::NativeScriptManager::NormalizedScriptLocator::fetch() const
{
  id const p = _v[@"fetch"];
  return RCTBridgingToBool(p);
}
inline double JS::NativeScriptManager::NormalizedScriptLocator::timeout() const
{
  id const p = _v[@"timeout"];
  return RCTBridgingToDouble(p);
}
inline bool JS::NativeScriptManager::NormalizedScriptLocator::absolute() const
{
  id const p = _v[@"absolute"];
  return RCTBridgingToBool(p);
}
inline NSString *JS::NativeScriptManager::NormalizedScriptLocator::query() const
{
  id const p = _v[@"query"];
  return RCTBridgingToOptionalString(p);
}
inline id<NSObject> _Nullable JS::NativeScriptManager::NormalizedScriptLocator::headers() const
{
  id const p = _v[@"headers"];
  return p;
}
inline NSString *JS::NativeScriptManager::NormalizedScriptLocator::body() const
{
  id const p = _v[@"body"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeScriptManager::NormalizedScriptLocator::verifyScriptSignature() const
{
  id const p = _v[@"verifyScriptSignature"];
  return RCTBridgingToString(p);
}
NS_ASSUME_NONNULL_END
#endif // RNScriptManagerSpec_H
