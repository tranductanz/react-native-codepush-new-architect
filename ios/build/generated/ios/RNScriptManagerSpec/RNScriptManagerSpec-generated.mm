/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "RNScriptManagerSpec.h"


@implementation NativeScriptManagerSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeScriptManager_NormalizedScriptLocator)
+ (RCTManagedPointer *)JS_NativeScriptManager_NormalizedScriptLocator:(id)json
{
  return facebook::react::managedPointer<JS::NativeScriptManager::NormalizedScriptLocator>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeScriptManagerSpecJSI_loadScript(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "loadScript", @selector(loadScript:scriptConfig:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeScriptManagerSpecJSI_prefetchScript(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "prefetchScript", @selector(prefetchScript:scriptConfig:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeScriptManagerSpecJSI_invalidateScripts(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "invalidateScripts", @selector(invalidateScripts:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeScriptManagerSpecJSI_unstable_evaluateScript(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "unstable_evaluateScript", @selector(unstable_evaluateScript:scriptSourceUrl:), args, count);
    }

  NativeScriptManagerSpecJSI::NativeScriptManagerSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["loadScript"] = MethodMetadata {2, __hostFunction_NativeScriptManagerSpecJSI_loadScript};
        setMethodArgConversionSelector(@"loadScript", 1, @"JS_NativeScriptManager_NormalizedScriptLocator:");
        
        methodMap_["prefetchScript"] = MethodMetadata {2, __hostFunction_NativeScriptManagerSpecJSI_prefetchScript};
        setMethodArgConversionSelector(@"prefetchScript", 1, @"JS_NativeScriptManager_NormalizedScriptLocator:");
        
        methodMap_["invalidateScripts"] = MethodMetadata {1, __hostFunction_NativeScriptManagerSpecJSI_invalidateScripts};
        
        
        methodMap_["unstable_evaluateScript"] = MethodMetadata {2, __hostFunction_NativeScriptManagerSpecJSI_unstable_evaluateScript};
        
  }
} // namespace facebook::react
